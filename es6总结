set 和 map 结构

set具有的方法属性：

add(value)：添加某个值，返回Set结构本身。
delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
has(value)：返回一个布尔值，表示该值是否为Set的成员。
clear()：清除所有成员，没有返回值。

const s = new Set();
[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));
1 上面s中最终的结果是不会有重复的，
   这样利用它可以做数组的去重

// 例一
var set = new Set([1, 2, 3, 4, 4]);
[...set]  //set转为数组的方法
// [1, 2, 3, 4]

2.向Set加入值的时候，不会发生类型转换，所以5和"5"是两个不同的值,它里面判断的时候用的是===

3.Array.from方法可以将Set结构转为数组。
 var items = new Set([1, 2, 3, 4, 5]);
 var array = Array.from(items);
 这就提供了去除数组重复成员的另一种方法。
 function dedupe(array) {
   return Array.from(new Set(array));
 }

遍历操作
Set结构的实例有四个遍历方法，可以用于遍历成员。

keys()：返回键名的遍历器
values()：返回键值的遍历器
entries()：返回键值对的遍历器
forEach()：使用回调函数遍历每个成员


let set = new Set(['red', 'green', 'blue']);

for (let item of set.keys()) {
  console.log(item);
}


map类型在数据结构上类似于对象，object中的键值必须是字符串，在map中键值可以是对象

实例的属性和操作方法
Map结构的实例有以下属性和操作方法。

（1）size属性

size属性返回Map结构的成员总数。

let map = new Map();
map.set('foo', true);
map.set('bar', false);

map.size // 2
（2）set(key, value)

set方法设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键。

var m = new Map();

m.set("edition", 6)        // 键是字符串
m.set(262, "standard")     // 键是数值
m.set(undefined, "nah")    // 键是undefined
set方法返回的是Map本身，因此可以采用链式写法。

let map = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');
（3）get(key)

get方法读取key对应的键值，如果找不到key，返回undefined。

var m = new Map();

var hello = function() {console.log("hello");}
m.set(hello, "Hello ES6!") // 键是函数

m.get(hello)  // Hello ES6!
（4）has(key)

has方法返回一个布尔值，表示某个键是否在Map数据结构中。

var m = new Map();

m.set("edition", 6);
m.set(262, "standard");
m.set(undefined, "nah");

m.has("edition")     // true
m.has("years")       // false
m.has(262)           // true
m.has(undefined)     // true
（5）delete(key)

delete方法删除某个键，返回true。如果删除失败，返回false。

var m = new Map();
m.set(undefined, "nah");
m.has(undefined)     // true

m.delete(undefined)
m.has(undefined)       // false
（6）clear()

clear方法清除所有成员，没有返回值。

let map = new Map();
map.set('foo', true);
map.set('bar', false);

map.size // 2
map.clear()
map.size // 0

